version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0

executors:
  build-tools:
    docker:
      - image: ${AWS_ECR_ACCOUNT_URL}/tier/buildtools:v3-latest

jobs:
  pytest:
    docker:
      - image: circleci/python:3.7-stretch
    environment:
      ENVIRONMENT: test
      USE_PROTECTED_MAPPING: true
    steps:
      - checkout
      - run: pip install pipenv
      - run: pipenv install -d
      - run: pipenv run pytest tests

  build-and-push-image:
    description: "Build and push image to ECR. Tagged as latest-<branch_name> and with <git_commit_hash>"

    executor: build-tools

    working_directory: ~/repo
    steps:
      # - setup_remote_docker:  # required for running docker commands, creates a remote environment
      #     docker_layer_caching: true # enable caching of docker layers from previous builds to speed up image creation

      - aws-ecr/build-and-push-image:
          region: AWS_DEFAULT_REGION
          create-repo: true
          repo: ${REPOSITORY_NAME}
          tag: '${CIRCLE_SHA1:0:8},latest-${CIRCLE_BRANCH//\//-}'
      - run:
          name: "Set Repository name"
          command: |
            mkdir -p artifacts
            ECR_REPOSITORY_URL=${ECR_REPOSITORY_URL:-$(aws ecr describe-repositories --query "repositories[*].repositoryUri" --output text --repository-names ${REPOSITORY_NAME})}
            echo $ECR_REPOSITORY_URL > artifacts/repository_url
      - persist_to_workspace:
          root: .
          paths:
            - artifacts

  deploy-to-stage:
    environment:
      ENVIRONMENT: 'stage'

    executor: build-tools

    working_directory: ~/repo

    steps:
    - checkout
    - attach_workspace:
        at: /tmp/workspace
    - run:
        name: source_environment
        command: echo "export ECR_REPOSITORY_URL=$(cat /tmp/workspace/artifacts/repository_url)" >> $BASH_ENV
    - run:
        name: "Deploy"
        command: |
          export IMAGE_TAG=${CIRCLE_SHA1:0:8}
          CLUSTERS=( ${STAGING_CLUSTERS} ) 
          for cluster in ${STAGING_CLUSTERS[@]}; do
            aws --region ${REGION} eks update-kubeconfig --name ${cluster}
            kubectl cluster-info
            cd helm && helmfile --log-level debug sync && cd ..
          done


  deploy-to-production:
    environment:
      ENVIRONMENT: 'production'

    executor: build-tools

    working_directory: ~/repo

    steps:
    - checkout
    - attach_workspace:
        at: /tmp/workspace
    - run:
        name: source_environment
        command: echo "export ECR_REPOSITORY_URL=$(cat /tmp/workspace/artifacts/repository_url)" >> $BASH_ENV
    - run:
        name: Deploy
        working_directory: ~/repo
        command: |
          export IMAGE_TAG=${CIRCLE_SHA1:0:8}
          CLUSTERS=( ${PRODUCTION_CLUSTERS} ) 
          for cluster in ${PRODUCTION_CLUSTERS[@]}; do
            aws --region ${REGION} eks update-kubeconfig --name ${cluster}
            kubectl cluster-info
            cd helm && helmfile --log-level debug sync && cd ..
          done

workflows:
  version: 2
  deploy:
    jobs:
    - pytest
    - build-and-push-image:
        context:
          - global-production
          - dockerhub
        requires: 
          - pytest
    - deploy-to-stage:
        context: global-staging
        requires:
          - build-and-push-image
        filters:
            branches:
              only: 
              - master
              - update_deps
              - CI-2368-fix-deployment
    - deploy-to-production:
        context: global-production
        requires:
          - deploy-to-stage
        filters:
            branches:
              only: master